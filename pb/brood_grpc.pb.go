// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: brood.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Brood_Join_FullMethodName = "/pb.brood/Join"
)

// BroodClient is the client API for Brood service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BroodClient interface {
	Join(ctx context.Context, in *JoinBrood, opts ...grpc.CallOption) (Brood_JoinClient, error)
}

type broodClient struct {
	cc grpc.ClientConnInterface
}

func NewBroodClient(cc grpc.ClientConnInterface) BroodClient {
	return &broodClient{cc}
}

func (c *broodClient) Join(ctx context.Context, in *JoinBrood, opts ...grpc.CallOption) (Brood_JoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &Brood_ServiceDesc.Streams[0], Brood_Join_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &broodJoinClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Brood_JoinClient interface {
	Recv() (*Spore, error)
	grpc.ClientStream
}

type broodJoinClient struct {
	grpc.ClientStream
}

func (x *broodJoinClient) Recv() (*Spore, error) {
	m := new(Spore)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BroodServer is the server API for Brood service.
// All implementations must embed UnimplementedBroodServer
// for forward compatibility
type BroodServer interface {
	Join(*JoinBrood, Brood_JoinServer) error
	mustEmbedUnimplementedBroodServer()
}

// UnimplementedBroodServer must be embedded to have forward compatible implementations.
type UnimplementedBroodServer struct {
}

func (UnimplementedBroodServer) Join(*JoinBrood, Brood_JoinServer) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedBroodServer) mustEmbedUnimplementedBroodServer() {}

// UnsafeBroodServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BroodServer will
// result in compilation errors.
type UnsafeBroodServer interface {
	mustEmbedUnimplementedBroodServer()
}

func RegisterBroodServer(s grpc.ServiceRegistrar, srv BroodServer) {
	s.RegisterService(&Brood_ServiceDesc, srv)
}

func _Brood_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinBrood)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BroodServer).Join(m, &broodJoinServer{stream})
}

type Brood_JoinServer interface {
	Send(*Spore) error
	grpc.ServerStream
}

type broodJoinServer struct {
	grpc.ServerStream
}

func (x *broodJoinServer) Send(m *Spore) error {
	return x.ServerStream.SendMsg(m)
}

// Brood_ServiceDesc is the grpc.ServiceDesc for Brood service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Brood_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.brood",
	HandlerType: (*BroodServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Join",
			Handler:       _Brood_Join_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "brood.proto",
}
