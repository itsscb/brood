syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/itsscb/brood/pb";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "brood API";
        version: "1.0";
        contact: {
            name: "itsscb";
            url: "https://github.com/itsscb/brood";
            email: "dev@itsscb.de";
        };
    };
    schemes: HTTP;
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
    security_definitions: {
        security: {
            key: "BearerAuth";
            value: {
                type: TYPE_API_KEY
                in: IN_HEADER
                name: "Authorization"
            }
        }
    }
};

message Spore {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            title: "Spore";
        };
    };
    string id = 1;
    google.protobuf.Timestamp timestamp = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        example: "\"2023-12-10T00:00:00Z\""
    }];
    string topic = 3;
    string data = 20;
}


message JoinBrood {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            title: "JoinBrood";
        };
    };
    string hive = 1;
    repeated string topics = 2;
}

// message SendSpore {
//     option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
//         json_schema: {
//             title: "SendSpore";
//         };
//     };
//     Spore spore = 1;
// }

message AcknowledgeSpore {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            title: "AcknowledgeSpore";
        };
    };
    bool ack = 1;
}

service brood {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
        description: "brood service"
    };

    rpc Join(JoinBrood) returns (stream Spore) {
        option (google.api.http) = {
            post: "/v1/join"
            body: "*"
        };
    }

    rpc SendSpore(Spore) returns (AcknowledgeSpore) {
        option (google.api.http) = {
            post: "/v1/send_spore"
            body: "*"
        };
    }
}